// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  internships  Internship[]
  remarks         Remark[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model Internship {
  id              String            @id @default(cuid())
  title           String            // Internship title/name
  role            String            // Role/position in internship
  startDate       DateTime
  endDate         DateTime
  description     String?           // Optional description
  status          InternshipStatus  @default(ACTIVE)
  certificateUrl  String?           // URL to generated certificate
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Foreign key to User
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  remarks         Remark[]
  @@map("internships")
}

enum InternshipStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}


model Remark {
  id              String            @id @default(cuid())
  internshipId    String
  userId          String
  message         String            @db.Text
  requestType     String            @default("GENERAL_REMARK") // CHANGE_REQUEST, GENERAL_REMARK, EXTENSION_REQUEST
  status          String            @default("PENDING") // PENDING, REVIEWED, RESOLVED
  adminResponse   String?           @db.Text
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  internship      Internship        @relation(fields: [internshipId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("remarks")
}